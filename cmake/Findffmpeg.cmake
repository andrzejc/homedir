
function(find_ffmpeg)
	find_program(ffmpeg_EXECUTABLE ffmpeg DOC "ffmpeg executable path")
	if(ffmpeg_EXECUTABLE)
		execute_process(COMMAND "${ffmpeg_EXECUTABLE}" -version
			RESULT_VARIABLE res
			OUTPUT_VARIABLE out
			ERROR_VARIABLE err)
		if(res)
			if(${ffmpeg_FIND_REQUIRED})
				set_property(CACHE ffmpeg_EXECUTABLE PROPERTY VALUE "ffmpeg_EXECUTABLE-NOTFOUND")
				message(FATAL_ERROR "Error executing ffmpeg -version (${res}: ${err})" )
			else()
				message(STATUS "Warning, could not run ffmpeg -version (${res}: ${err})")
			endif()
		else()
			set(_ffmpeg_ver_regex [[(([0-9]+)(\.([0-9]+)(\.([0-9]+))?)?[^ $]*)]])
			if(out MATCHES "ffmpeg version ${_ffmpeg_ver_regex}")
				set(ffmpeg_VERSION_STRING "${CMAKE_MATCH_1}" PARENT_SCOPE)
				set(ffmpeg_VERSION_MAJOR "${CMAKE_MATCH_2}" PARENT_SCOPE)
				set(ffmpeg_VERSION_MINOR "${CMAKE_MATCH_4}" PARENT_SCOPE)
				set(ffmpeg_VERSION_PATCH "${CMAKE_MATCH_6}" PARENT_SCOPE)
			else()
				if(NOT ffmpeg_FIND_QUIETLY)
					string(REPLACE "\n" "\n  " ver_msg "\n${out}")
					message(WARNING "ffmpeg version not recognized:${ver_msg}\nPlease report.")
				endif()
			endif()
			set(ffmpeg_VERSION "${ffmpeg_VERSION_MAJOR}")
			if(NOT "x${ffmpeg_VERSION}" STREQUAL "x")
				foreach(c MINOR PATCH TWEAK)
					if(NOT "x${ffmpeg_VERSION_${c}}" STREQUAL "x")
						string(APPEND ffmpeg_VERSION ".${ffmpeg_VERSION_${c}}")
					else()
						break()
					endif()
				endforeach()
			endif()
			set(ffpmeg_VERSION "${ffpmeg_VERSION}" PARENT_SCOPE)
		endif()
	endif()
	set(ffmpeg_EXECUTABLE "${ffmpeg_EXECUTABLE}" PARENT_SCOPE)
endfunction()

include(FindPackageHandleStandardArgs)
find_ffmpeg()

if(ffmpeg_FIND_COMPONENTS)
	set(_ffmpeg_REQUIRED_VARS)
	foreach(component ${ffmpeg_FIND_COMPONENTS})
		if(component STREQUAL "Runtime")
			list(APPEND _ffmpeg_REQUIRED_VARS ffmpeg_EXECUTABLE)
			if(ffmpeg_EXECUTABLE)
				set(ffmpeg_Runtime_FOUND TRUE)
			endif()
		elseif(component STREQUAL "Development")
			# TODO maybe some day
			set(ffmpeg_Development_FOUND ffmpeg_Development_FOUND-NOTFOUND)
		else()
			message(FATAL_ERROR "FFMPEG Component: ${component} is not handled")
		endif()
	endforeach()
	list(REMOVE_DUPLICATES _ffmpeg_REQUIRED_VARS)
	find_package_handle_standard_args(ffmpeg
		REQUIRED_VARS ${_ffmpeg_REQUIRED_VARS} HANDLE_COMPONENTS
		VERSION_VAR ffmpeg_VERSION)
	if(ffmpeg_FOUND)
		foreach(component ${ffmpeg_FIND_COMPONENTS})
			set(ffmpeg_${component}_FOUND TRUE)
		endforeach()
	endif()
else()
	find_package_handle_standard_args(ffmpeg
		REQUIRED_VARS ffmpeg_EXECUTABLE VERSION_VAR ffmpeg_VERSION_STRING)
endif()
mark_as_advanced(ffmpeg_EXECUTABLE)