#!/usr/bin/env bash
set -e -o pipefail

HOMEDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")"/.. && pwd)"
CMAKE_COMMAND="${CMAKE_COMMAND:-cmake}"

create_flaac_dir() {
	"${CMAKE_COMMAND}" -E make_directory "${flaac_dir}"
}

set_generator() {
	local gen="$1"
	# set generator only on first run
	[ -f "${flaac_dir}/CMakeCache.txt" ] || \
		[ "${gen}" == "" ] || \
			gen_cmd="-G"${gen}""
}

generate_cmake_lists() {
	local cmake_lists="${dir}/CMakeLists.txt"
	[ -f "${cmake_lists}" ] || {
		# fresh directory, do some setup
		# minimal CMakeLists.txt file
		echo "Creating minimal CMakeLists.txt file..."
		cat > "${cmake_lists}" <<-EOF
			cmake_minimum_required(VERSION 3.4)
			project(MusicLibraryMaintenance VERSION 0.0.1 DESCRIPTION "Generated by flaac" LANGUAGES NONE)
			include(MediaLibraryMaintenance)
			mark_as_advanced(FORCE CMAKE_INSTALL_PREFIX CMAKE_MODULE_PATH CMAKE_OSX_ARCHITECTURES CMAKE_OSX_DEPLOYMENT_TARGET CMAKE_OSX_SYSROOT)
			recode_all("\${CMAKE_CURRENT_LIST_DIR}")
			EOF
	}
}

cmake_generate() {
	local dir_abs="$(cd "${dir}" && pwd)"
	"${CMAKE_COMMAND}" -E chdir "${flaac_dir}" \
		"${CMAKE_COMMAND}"  "-DCMAKE_MODULE_PATH:INTERNAL=${HOMEDIR}/cmake" \
		${gen_cmd} "${dir_abs}"
}

cmake_build() {
	"${CMAKE_COMMAND}" --build "${flaac_dir}"
}

cmake_ccmake() {
	local ccmake_cmd="$(dirname "$(which "${CMAKE_COMMAND}")")"/ccmake
	"${ccmake_cmd}" "${flaac_dir}"
}

run_config=
while [ $# -gt 0 ]
do
	case "$1" in
	--config)    run_config=1; shift; ;;
	--generator) shift; CMAKE_GENERATOR="$1"; shift ;;
	--help) shift; # TODO 
		;;
	--dir)       shift; flaac_dir="$1"; shift; ;;
	*)           dir="$1"; shift; ;;
	esac
done

dir="${dir:-.}"
flaac_dir="${flaac_dir:-"${dir}"/.flaac}"
gen_cmd=

create_flaac_dir
set_generator "${CMAKE_GENERATOR:-}"
generate_cmake_lists
cmake_generate
if [ "${run_config}" == 1 ]
then
	cmake_ccmake
else
	cmake_build
fi
