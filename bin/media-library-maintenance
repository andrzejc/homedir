#!/usr/bin/env bash
set -e -o pipefail
# set -x

THIS_FILE="${BASH_SOURCE[0]}"
HOMEDIR="$(cd "$(dirname "${THIS_FILE}")"/.. && pwd)"

function check_missing() {
	local missing=
	for f in "$@"
	do
		if ! which 2>&1 > /dev/null "${f}"
		then
			missing="${missing:+${missing},}${f}"
		fi
	done
	echo "${missing}"
}

function check_prerequisites() {
	local missing="$(check_missing "${@}")"
	if [ -n "${missing}" ]
	then
		echo "Prerequisites missing: ${missing}; install using brew (https://brew.sh/)" >&2
		exit 1
	fi
}

create_work_dir() {
	"${CMAKE_COMMAND}" -E make_directory "${WORK_DIR}"
}

set_generator() {
	local gen="$1"
	# set generator only on first run
	[ -f "${WORK_DIR}/CMakeCache.txt" ] || \
		[ "${gen}" == "" ] || \
			CMAKE_GENERATOR_OPT="-G"${gen}""
}

generate_cmake_lists() {
	local cmake_lists_target="${SOURCE_DIR}/CMakeLists.txt"
	local cmake_lists_real="${WORK_DIR}/CMakeLists.txt"
	test -f "${cmake_lists_real}" || {
		# fresh directory, do some setup
		# minimal CMakeLists.txt file
		echo "Creating minimal CMakeLists.txt file..."
		cat > "${cmake_lists_real}" <<-EOF
			cmake_minimum_required(VERSION 3.4)
			project(MusicLibraryMaintenance VERSION 0.0.1 DESCRIPTION "Generated by media-library-maintenance" LANGUAGES NONE)
			include(MediaLibraryMaintenance)
			mark_as_advanced(FORCE CMAKE_INSTALL_PREFIX CMAKE_MODULE_PATH CMAKE_OSX_ARCHITECTURES CMAKE_OSX_DEPLOYMENT_TARGET CMAKE_OSX_SYSROOT)
			add_media_library_maintenance_targets()
			EOF
	}
	local lock="${SOURCE_DIR}/.cmake-lock.$(hostname -s).$$"
	local trap_cmd="echo 'Cleaning up...'; rm -f \""${lock}"\"; test -f \""${SOURCE_DIR}"/.cmake-lock.*\" || rm -f \""${cmake_lists_target}"\""
	touch "${lock}" && \
		trap  "${trap_cmd}" EXIT

	if [ ! -f "${cmake_lists_target}" ] || \
	   ! diff -q "${cmake_lists_real}" "${cmake_lists_target}" 2>&1 > /dev/null
	then
		rsync -q --times "${cmake_lists_real}" "${cmake_lists_target}"
	fi
}

cmake_common_opts() {
	local dir_abs="$(cd "${SOURCE_DIR}" && pwd)"
	local -a arr=()
	arr+=("-DCMAKE_MODULE_PATH:INTERNAL=${HOMEDIR}/cmake")
	arr+=("${CMAKE_GENERATOR_OPT}")
	arr+=("${dir_abs}")
	declare -p arr | sed -e 's/^declare -a [^=]*=//'
}

cmake_generate() {
	eval "declare -a opts="$(cmake_common_opts)""
	"${CMAKE_COMMAND}" -E chdir "${WORK_DIR}" "${CMAKE_COMMAND}" "${opts[@]}"
}

cmake_build() {
	# "${CMAKE_COMMAND}" --build "${WORK_DIR}" ${target_opt} -- -d explain -v
	"${CMAKE_COMMAND}" --build "${WORK_DIR}" --target "${1}"
}

cmake_ccmake() {
	local ccmake_cmd="$(dirname "$(which "${CMAKE_COMMAND}")")"/ccmake
	eval "declare -a opts="$(cmake_common_opts)""
	"${CMAKE_COMMAND}" -E chdir "${WORK_DIR}" "${ccmake_cmd}" "${opts[@]}"
}

function mlm_parse_args() {
	while [ $# -gt 0 ]
	do
		case "$1" in
		--config|-c)    shift; MLM_TARGET=config; ;;
		--generator|-g) shift; CMAKE_GENERATOR="$1"; shift ;;
		--mode|-m)      shift; MLM_TARGET="$1"; shift ;;
		--work-dir|-w)  shift; WORK_DIR="$1"; shift; ;;
		--force|-f)     shift; MLM_FORCE=1; ;;
		--help|-h)      shift; # TODO
			;;
		*)              SOURCE_DIR="$1"; shift; ;;
		esac
	done
}

function mlm_run() {
	check_prerequisites cmake
	create_work_dir
	set_generator "${CMAKE_GENERATOR}"
	generate_cmake_lists

	if [ "${MLM_TARGET}" == index ] && [ "${MLM_FORCE}" == 1 ]
	then
		rm -f "${WORK_DIR}"/import.index
	fi

	if [ "${MLM_TARGET}" == config ]
	then
		cmake_ccmake
	else
		cmake_generate
		cmake_build "${MLM_TARGET}"
		if [ "${MLM_TARGET}" != index ]
		then
			# this might've been deleted by other mlm process meanwhile
			generate_cmake_lists
			# cmake_generate &&
			cmake_build "${MLM_TARGET}"
		fi
	fi
}

function mlm_main() {
	mlm_parse_args "$@"

	MLM_TARGET="${MLM_TARGET:-index}"
	SOURCE_DIR="${SOURCE_DIR:-"${PWD}"}"
	WORK_DIR="${WORK_DIR:-"${SOURCE_DIR}"/.mlm}"

	local ninja_path="$(which ninja 2> /dev/null)"
	local gen_default="${ninja_path:+Ninja}"
	CMAKE_COMMAND="${CMAKE_COMMAND:-"$(which cmake)"}"
	CMAKE_GENERATOR="${CMAKE_GENERATOR:-"${gen_default}"}"
	MLM_FORCE="${MLM_FORCE:-0}"
	CMAKE_GENERATOR_OPT=

	mlm_run
}

if [ "$0" == "${THIS_FILE}" ]
then
	mlm_main "$@"
fi